name: Backend Staging Build and Push

on:
  push:
    tags:
      - backend-v[0-9]+.[0-9]+.[0-9]+-rc*

env:
  DOCKER_IMAGE_NAME: ghcr.io/${{ github.repository }}/zerotorelease 
jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      packages: write
      contents: read  

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

        # These in built properties can also be used
        # GITHUB_REF_NAME = branch name or tag name
        # GITHUB_REF = refs/heads/branch-name or refs/tags/tag-name
        # GITHUB_REF_TYPE = branch or tag
        # GITHUB_SHA = commit id
      - name: Extract git metadata
        id: git-metadata
        run: |
          echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          if [ "$(git tag --points-at HEAD)" ]; then
            echo "GIT_TAG=$(git tag --points-at HEAD)" >> $GITHUB_ENV
            echo "IS_TAG=true" >> $GITHUB_ENV
          else
            echo "GIT_TAG=latest" >> $GITHUB_ENV
            echo "IS_TAG=false" >> $GITHUB_ENV
          fi
          echo "IS_TAG=$IS_TAG"
          echo "GIT_TAG=$GIT_TAG"


      # if IS_TAG is not true fail the build
      # - name: Check if this git commit is a tag
      #   run: |
      #     if [ "${{ env.IS_TAG }}" != "true" ]; then
      #       echo "This git commit is NOT a tag, exiting"
      #       exit 1
      #     fi

      - name: Setup version info
        run: |
          echo "${{ env.GIT_TAG}}" > backend/version/version.githash
          echo "Verifying version.githash"
          cat backend/version/version.githash

      - name: Check if Docker image exists
        id: check_image
        run: |
          set -x
          if docker pull ${DOCKER_IMAGE_NAME}:${{ env.GIT_SHA }} > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_ENV
            echo "Docker image exists"
          else
            echo "exists=false" >> $GITHUB_ENV
            echo "Docker image does not exist"
          fi

      - name: Build and push Docker image if not exists [zero:${{ env.GIT_SHA }}]
        if: env.exists == 'false'
        run: |
          set -x
          docker build -f backend/Dockerfile \
            -t ${DOCKER_IMAGE_NAME}:${{ env.GIT_SHA }} \
            ./backend
          
          docker push ${DOCKER_IMAGE_NAME}:${{ env.GIT_SHA }}

      - name: Re-tag and push Docker image [zerotorelease:${{ env.GIT_TAG }}]
        run: |
          set -x
          docker pull ${DOCKER_IMAGE_NAME}:${{ env.GIT_SHA }}
          docker tag ${DOCKER_IMAGE_NAME}:${{ env.GIT_SHA }} ${DOCKER_IMAGE_NAME}:${{ env.GIT_TAG }}
          docker push ${DOCKER_IMAGE_NAME}:${{ env.GIT_TAG }}